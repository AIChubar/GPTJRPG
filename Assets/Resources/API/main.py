import openai
import os
import json

structure_file = open("example2.json", "r")
enemies_file = open("enemies.txt", "r")
existingWorlds = os.listdir(os.path.join(os.pardir, "Worlds"))

structure_content = structure_file.read()
enemies_content = enemies_file.read()

response = openai.chat.completions.create(
    model="gpt-3.5-turbo-0125",
    temperature=0.8,
    max_tokens=4000,
    response_format={"type": "json_object"},
    messages=[
        {
            "role": "system",
            "content": "#Setting: \n You are an assistant for creating textual game content. The output should be in "
                       "JSON format, according to a structure I provide you later.\n"
                       "#Instructions: \n Your main task is to replace placeholder values in JSON variables with "
                       "content generated by you, strictly following the constraints I provide.\n"
                       "Replace \"...\" according to the previous structure parts. "
                       "Try to have different monsters in groups with names "
                       "representing such groups of different units.\n"
                       "#Structure: \n" + structure_content + "\n"
                       "#Constraints: \n"
                       "1. Fill the enemyID variable in the resulting JSON only with exact strings including numerical id from the provided list: " + enemies_content.replace('\n', ' ') + "\n"
                       "2. It is forbidden to change the numerical id or the id from the list itself. \n"                                                                                                                                                                    
                       "3. enemyName can be filled with the name that will be representing enemyID and should be logically connected to it. \n"                                                                                                                                                                 
                       "4. Do not use names from this list for the worldName, and try to make names dissimilar to those in the list of existing worlds: \n" + "\n".join(existingWorlds) + "\n"
                       "5. Do not modify lists provided. \n"
                       "6. Use at most two same enemies in each group. There should be at least two enemies in each group. \n"
                       "7. Two levels. Five enemy groups in each level. \n"
        },
        {
            "role": "user",
            "content": "Start generating."
        },
        
    ]
)

json_result = json.loads(response.choices[-1].message.content)
with open(os.path.join(os.pardir, "Worlds", json_result["narrativeData"]["worldName"] + ".json"), 'w') as f:
    json.dump(json_result, f, indent=2)

structure_file.close()
enemies_file.close()
print(response.choices[0].message.content)
