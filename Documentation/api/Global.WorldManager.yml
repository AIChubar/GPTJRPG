### YamlMime:ManagedReference
items:
- uid: Global.WorldManager
  commentId: T:Global.WorldManager
  id: WorldManager
  parent: Global
  children:
  - Global.WorldManager.AddButton(System.String)
  - Global.WorldManager.buttonsToDisable
  - Global.WorldManager.CheckNewGame
  - Global.WorldManager.currentWorld
  - Global.WorldManager.DeleteInterface(WorldButton)
  - Global.WorldManager.DisableInput
  - Global.WorldManager.EnableInput
  - Global.WorldManager.inputDisabled
  - Global.WorldManager.SetCurrentWorld(WorldButton)
  - Global.WorldManager.worldButtonParent
  - Global.WorldManager.worldButtonPrefab
  - Global.WorldManager.worldManager
  - Global.WorldManager.Worlds
  langs:
  - csharp
  - vb
  name: WorldManager
  nameWithType: WorldManager
  fullName: WorldManager
  type: Class
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: WorldManager
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 12
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nClass that is responsible for storing and managing Game Worlds.\n"
  example: []
  syntax:
    content: 'public class WorldManager : MonoBehaviour'
    content.vb: Public Class WorldManager Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.WorldManager.currentWorld
  commentId: F:Global.WorldManager.currentWorld
  id: currentWorld
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: currentWorld
  nameWithType: WorldManager.currentWorld
  fullName: WorldManager.currentWorld
  type: Field
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: currentWorld
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nCurrently chosen Game World.\n"
  example: []
  syntax:
    content: >-
      [HideInInspector]

      [Tooltip("Currently chosen Game World.")]

      public WorldButton currentWorld
    return:
      type: Global.WorldButton
    content.vb: >-
      <HideInInspector>

      <Tooltip("Currently chosen Game World.")>

      Public currentWorld As WorldButton
  attributes:
  - type: UnityEngine.HideInInspector
    ctor: UnityEngine.HideInInspector.#ctor
    arguments: []
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: {}
- uid: Global.WorldManager.Worlds
  commentId: F:Global.WorldManager.Worlds
  id: Worlds
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: Worlds
  nameWithType: WorldManager.Worlds
  fullName: WorldManager.Worlds
  type: Field
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: Worlds
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 31
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nContains all created Game Worlds.\n"
  example: []
  syntax:
    content: >-
      [HideInInspector]

      [Tooltip("Contains all created Game Worlds.")]

      public List<string> Worlds
    return:
      type: System.Collections.Generic.List{System.String}
    content.vb: >-
      <HideInInspector>

      <Tooltip("Contains all created Game Worlds.")>

      Public Worlds As List(Of String)
  attributes:
  - type: UnityEngine.HideInInspector
    ctor: UnityEngine.HideInInspector.#ctor
    arguments: []
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: {}
- uid: Global.WorldManager.worldButtonPrefab
  commentId: F:Global.WorldManager.worldButtonPrefab
  id: worldButtonPrefab
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: worldButtonPrefab
  nameWithType: WorldManager.worldButtonPrefab
  fullName: WorldManager.worldButtonPrefab
  type: Field
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: worldButtonPrefab
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 37
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nPrefab for UI Button object representing the gameWorld.\n"
  example: []
  syntax:
    content: >-
      [Tooltip("Prefab for UI Button object representing the gameWorld.")]

      public GameObject worldButtonPrefab
    return:
      type: UnityEngine.GameObject
    content.vb: >-
      <Tooltip("Prefab for UI Button object representing the gameWorld.")>

      Public worldButtonPrefab As GameObject
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: {}
- uid: Global.WorldManager.worldButtonParent
  commentId: F:Global.WorldManager.worldButtonParent
  id: worldButtonParent
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: worldButtonParent
  nameWithType: WorldManager.worldButtonParent
  fullName: WorldManager.worldButtonParent
  type: Field
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: worldButtonParent
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 42
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nScrollView content object.\n"
  example: []
  syntax:
    content: >-
      [Tooltip("ScrollView content object.")]

      public GameObject worldButtonParent
    return:
      type: UnityEngine.GameObject
    content.vb: >-
      <Tooltip("ScrollView content object.")>

      Public worldButtonParent As GameObject
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: {}
- uid: Global.WorldManager.inputDisabled
  commentId: F:Global.WorldManager.inputDisabled
  id: inputDisabled
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: inputDisabled
  nameWithType: WorldManager.inputDisabled
  fullName: WorldManager.inputDisabled
  type: Field
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: inputDisabled
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 48
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nIs input currently disabled.\n"
  example: []
  syntax:
    content: >-
      [Tooltip("Is input currently disabled.")]

      public bool inputDisabled
    return:
      type: System.Boolean
    content.vb: >-
      <Tooltip("Is input currently disabled.")>

      Public inputDisabled As Boolean
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: {}
- uid: Global.WorldManager.worldManager
  commentId: P:Global.WorldManager.worldManager
  id: worldManager
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: worldManager
  nameWithType: WorldManager.worldManager
  fullName: WorldManager.worldManager
  type: Property
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: worldManager
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 52
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nStatic object representing the class.\n"
  example: []
  syntax:
    content: public static WorldManager worldManager { get; }
    parameters: []
    return:
      type: Global.WorldManager
    content.vb: Public Shared Property worldManager As WorldManager
  overload: Global.WorldManager.worldManager*
- uid: Global.WorldManager.buttonsToDisable
  commentId: F:Global.WorldManager.buttonsToDisable
  id: buttonsToDisable
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: buttonsToDisable
  nameWithType: WorldManager.buttonsToDisable
  fullName: WorldManager.buttonsToDisable
  type: Field
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: buttonsToDisable
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 57
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nButtons that should be disabled when the world is being created.\n"
  example: []
  syntax:
    content: >-
      [Tooltip("Buttons that should be disabled when the world is being created.")]

      public List<Button> buttonsToDisable
    return:
      type: System.Collections.Generic.List{UnityEngine.UI.Button}
    content.vb: >-
      <Tooltip("Buttons that should be disabled when the world is being created.")>

      Public buttonsToDisable As List(Of Button)
  attributes:
  - type: UnityEngine.TooltipAttribute
    ctor: UnityEngine.TooltipAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: {}
- uid: Global.WorldManager.DeleteInterface(WorldButton)
  commentId: M:Global.WorldManager.DeleteInterface(WorldButton)
  id: DeleteInterface(WorldButton)
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: DeleteInterface(WorldButton)
  nameWithType: WorldManager.DeleteInterface(WorldButton)
  fullName: WorldManager.DeleteInterface(WorldButton)
  type: Method
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: DeleteInterface
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 95
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nMethod that is called from the World Button. Makes the call to the method that opens deleting interface in the Main Menu.\n"
  example: []
  syntax:
    content: public void DeleteInterface(WorldButton button)
    parameters:
    - id: button
      type: Global.WorldButton
      description: World Button that is to be deleted in the deleting interface.
    content.vb: Public Sub DeleteInterface(button As WorldButton)
  overload: Global.WorldManager.DeleteInterface*
- uid: Global.WorldManager.SetCurrentWorld(WorldButton)
  commentId: M:Global.WorldManager.SetCurrentWorld(WorldButton)
  id: SetCurrentWorld(WorldButton)
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: SetCurrentWorld(WorldButton)
  nameWithType: WorldManager.SetCurrentWorld(WorldButton)
  fullName: WorldManager.SetCurrentWorld(WorldButton)
  type: Method
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: SetCurrentWorld
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 104
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nMethod that is called from the World Button. Sets the Game World that will be played.\n"
  example: []
  syntax:
    content: public void SetCurrentWorld(WorldButton button)
    parameters:
    - id: button
      type: Global.WorldButton
      description: World Button that is to be deleted in the deleting interface.
    content.vb: Public Sub SetCurrentWorld(button As WorldButton)
  overload: Global.WorldManager.SetCurrentWorld*
- uid: Global.WorldManager.CheckNewGame
  commentId: M:Global.WorldManager.CheckNewGame
  id: CheckNewGame
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: CheckNewGame()
  nameWithType: WorldManager.CheckNewGame()
  fullName: WorldManager.CheckNewGame()
  type: Method
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: CheckNewGame
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 114
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nMethod that checks if the New Game Button should be set to be interactable.\n"
  example: []
  syntax:
    content: public void CheckNewGame()
    content.vb: Public Sub CheckNewGame()
  overload: Global.WorldManager.CheckNewGame*
- uid: Global.WorldManager.AddButton(System.String)
  commentId: M:Global.WorldManager.AddButton(System.String)
  id: AddButton(System.String)
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: AddButton(string)
  nameWithType: WorldManager.AddButton(string)
  fullName: WorldManager.AddButton(string)
  type: Method
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: AddButton
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 133
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nMethod that adds buttons for the corresponding Game World for existing ones when the game is launched and when the new Game World is created.\n"
  example: []
  syntax:
    content: public void AddButton(string worldName)
    parameters:
    - id: worldName
      type: System.String
      description: String that is shown on the Game World Button.
    content.vb: Public Sub AddButton(worldName As String)
  overload: Global.WorldManager.AddButton*
  nameWithType.vb: WorldManager.AddButton(String)
  fullName.vb: WorldManager.AddButton(String)
  name.vb: AddButton(String)
- uid: Global.WorldManager.DisableInput
  commentId: M:Global.WorldManager.DisableInput
  id: DisableInput
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: DisableInput()
  nameWithType: WorldManager.DisableInput()
  fullName: WorldManager.DisableInput()
  type: Method
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: DisableInput
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 148
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nDisable all the buttons in the Main Menu.\n"
  example: []
  syntax:
    content: public void DisableInput()
    content.vb: Public Sub DisableInput()
  overload: Global.WorldManager.DisableInput*
- uid: Global.WorldManager.EnableInput
  commentId: M:Global.WorldManager.EnableInput
  id: EnableInput
  parent: Global.WorldManager
  langs:
  - csharp
  - vb
  name: EnableInput()
  nameWithType: WorldManager.EnableInput()
  fullName: WorldManager.EnableInput()
  type: Method
  source:
    remote:
      path: Assets/Scripts/MainMenuScripts/WorldManager.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: EnableInput
    path: ../Assets/Scripts/MainMenuScripts/WorldManager.cs
    startLine: 160
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nEnable all the buttons in the Main Menu.\n"
  example: []
  syntax:
    content: public void EnableInput()
    content.vb: Public Sub EnableInput()
  overload: Global.WorldManager.EnableInput*
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.WorldButton
  commentId: T:Global.WorldButton
  name: WorldButton
  nameWithType: WorldButton
  fullName: WorldButton
- uid: System.Collections.Generic.List{System.String}
  commentId: T:System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<string>
  nameWithType: List<string>
  fullName: System.Collections.Generic.List<string>
  nameWithType.vb: List(Of String)
  fullName.vb: System.Collections.Generic.List(Of String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: System.String
    name: string
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.String
    name: String
    isExternal: true
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
  spec.vb:
  - uid: System
    name: System
    isExternal: true
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
- uid: UnityEngine.GameObject
  commentId: T:UnityEngine.GameObject
  parent: UnityEngine
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.WorldManager.worldManager*
  commentId: Overload:Global.WorldManager.worldManager
  name: worldManager
  nameWithType: WorldManager.worldManager
  fullName: WorldManager.worldManager
- uid: Global.WorldManager
  commentId: T:Global.WorldManager
  name: WorldManager
  nameWithType: WorldManager
  fullName: WorldManager
- uid: System.Collections.Generic.List{UnityEngine.UI.Button}
  commentId: T:System.Collections.Generic.List{UnityEngine.UI.Button}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Button>
  nameWithType: List<Button>
  fullName: System.Collections.Generic.List<UnityEngine.UI.Button>
  nameWithType.vb: List(Of Button)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.UI.Button)
  name.vb: List(Of Button)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: <
  - uid: UnityEngine.UI.Button
    name: Button
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: UnityEngine.UI.Button
    name: Button
    isExternal: true
  - name: )
- uid: Global.WorldManager.DeleteInterface*
  commentId: Overload:Global.WorldManager.DeleteInterface
  name: DeleteInterface
  nameWithType: WorldManager.DeleteInterface
  fullName: WorldManager.DeleteInterface
- uid: Global.WorldManager.SetCurrentWorld*
  commentId: Overload:Global.WorldManager.SetCurrentWorld
  name: SetCurrentWorld
  nameWithType: WorldManager.SetCurrentWorld
  fullName: WorldManager.SetCurrentWorld
- uid: Global.WorldManager.CheckNewGame*
  commentId: Overload:Global.WorldManager.CheckNewGame
  name: CheckNewGame
  nameWithType: WorldManager.CheckNewGame
  fullName: WorldManager.CheckNewGame
- uid: Global.WorldManager.AddButton*
  commentId: Overload:Global.WorldManager.AddButton
  name: AddButton
  nameWithType: WorldManager.AddButton
  fullName: WorldManager.AddButton
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Global.WorldManager.DisableInput*
  commentId: Overload:Global.WorldManager.DisableInput
  name: DisableInput
  nameWithType: WorldManager.DisableInput
  fullName: WorldManager.DisableInput
- uid: Global.WorldManager.EnableInput*
  commentId: Overload:Global.WorldManager.EnableInput
  name: EnableInput
  nameWithType: WorldManager.EnableInput
  fullName: WorldManager.EnableInput
