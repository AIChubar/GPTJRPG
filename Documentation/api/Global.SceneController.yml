### YamlMime:ManagedReference
items:
- uid: Global.SceneController
  commentId: T:Global.SceneController
  id: SceneController
  parent: Global
  children:
  - Global.SceneController.BattleMusic
  - Global.SceneController.LevelMusic
  - Global.SceneController.LoadScene(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  - Global.SceneController.MenuMusic
  - Global.SceneController.UnloadScene(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  langs:
  - csharp
  - vb
  name: SceneController
  nameWithType: SceneController
  fullName: SceneController
  type: Class
  source:
    remote:
      path: Assets/Scripts/Tools/SceneController.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: SceneController
    path: ../Assets/Scripts/Tools/SceneController.cs
    startLine: 8
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nScript for manipulating scenes, smooth scenes changing.\n"
  example: []
  syntax:
    content: 'public class SceneController : MonoBehaviour'
    content.vb: Public Class SceneController Inherits MonoBehaviour
  inheritance:
  - System.Object
  - UnityEngine.Object
  - UnityEngine.Component
  - UnityEngine.Behaviour
  - UnityEngine.MonoBehaviour
  extensionMethods:
  - System.Object.Global.ReflectionExtensions.ToStringWithQuotes
- uid: Global.SceneController.LevelMusic
  commentId: F:Global.SceneController.LevelMusic
  id: LevelMusic
  parent: Global.SceneController
  langs:
  - csharp
  - vb
  name: LevelMusic
  nameWithType: SceneController.LevelMusic
  fullName: SceneController.LevelMusic
  type: Field
  source:
    remote:
      path: Assets/Scripts/Tools/SceneController.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: LevelMusic
    path: ../Assets/Scripts/Tools/SceneController.cs
    startLine: 19
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Dropdown("AudioManager.Instance.Sounds", "Name")]

      public Sound LevelMusic
    return:
      type: Global.Sound
    content.vb: >-
      <Dropdown("AudioManager.Instance.Sounds", "Name")>

      Public LevelMusic As Sound
  attributes:
  - type: Global.DropdownAttribute
    ctor: Global.DropdownAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: {}
    - type: System.String
      value: {}
- uid: Global.SceneController.MenuMusic
  commentId: F:Global.SceneController.MenuMusic
  id: MenuMusic
  parent: Global.SceneController
  langs:
  - csharp
  - vb
  name: MenuMusic
  nameWithType: SceneController.MenuMusic
  fullName: SceneController.MenuMusic
  type: Field
  source:
    remote:
      path: Assets/Scripts/Tools/SceneController.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: MenuMusic
    path: ../Assets/Scripts/Tools/SceneController.cs
    startLine: 22
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Dropdown("AudioManager.Instance.Sounds", "Name")]

      public Sound MenuMusic
    return:
      type: Global.Sound
    content.vb: >-
      <Dropdown("AudioManager.Instance.Sounds", "Name")>

      Public MenuMusic As Sound
  attributes:
  - type: Global.DropdownAttribute
    ctor: Global.DropdownAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: {}
    - type: System.String
      value: {}
- uid: Global.SceneController.BattleMusic
  commentId: F:Global.SceneController.BattleMusic
  id: BattleMusic
  parent: Global.SceneController
  langs:
  - csharp
  - vb
  name: BattleMusic
  nameWithType: SceneController.BattleMusic
  fullName: SceneController.BattleMusic
  type: Field
  source:
    remote:
      path: Assets/Scripts/Tools/SceneController.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: BattleMusic
    path: ../Assets/Scripts/Tools/SceneController.cs
    startLine: 25
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: >-
      [Dropdown("AudioManager.Instance.Sounds", "Name")]

      public Sound BattleMusic
    return:
      type: Global.Sound
    content.vb: >-
      <Dropdown("AudioManager.Instance.Sounds", "Name")>

      Public BattleMusic As Sound
  attributes:
  - type: Global.DropdownAttribute
    ctor: Global.DropdownAttribute.#ctor(System.String,System.String)
    arguments:
    - type: System.String
      value: {}
    - type: System.String
      value: {}
- uid: Global.SceneController.LoadScene(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:Global.SceneController.LoadScene(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  id: LoadScene(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  parent: Global.SceneController
  langs:
  - csharp
  - vb
  name: LoadScene(int, float, float, float, bool, bool)
  nameWithType: SceneController.LoadScene(int, float, float, float, bool, bool)
  fullName: SceneController.LoadScene(int, float, float, float, bool, bool)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Tools/SceneController.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: LoadScene
    path: ../Assets/Scripts/Tools/SceneController.cs
    startLine: 59
  assemblies:
  - Assembly-CSharp
  namespace: Global
  summary: "\nMethod that adds or removes an outline from the given GameObject.\n"
  example: []
  syntax:
    content: public static void LoadScene(int index, float closingDuration = 1, float openingDuration = 1, float waitTime = 1, bool additive = false, bool toUnload = false)
    parameters:
    - id: index
      type: System.Int32
      description: Scene of the index to be loaded.
    - id: closingDuration
      type: System.Single
      description: Duration of the fading in animation.
    - id: openingDuration
      type: System.Single
      description: Duration of the fading out animation.
    - id: waitTime
      type: System.Single
      description: Duration when the screen is fully faded.
    - id: additive
      type: System.Boolean
      description: If the additive scene is loaded
    - id: toUnload
      type: System.Boolean
      description: If the additive scene is unloaded.
    content.vb: Public Shared Sub LoadScene(index As Integer, closingDuration As Single = 1, openingDuration As Single = 1, waitTime As Single = 1, additive As Boolean = False, toUnload As Boolean = False)
  overload: Global.SceneController.LoadScene*
  nameWithType.vb: SceneController.LoadScene(Integer, Single, Single, Single, Boolean, Boolean)
  fullName.vb: SceneController.LoadScene(Integer, Single, Single, Single, Boolean, Boolean)
  name.vb: LoadScene(Integer, Single, Single, Single, Boolean, Boolean)
- uid: Global.SceneController.UnloadScene(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  commentId: M:Global.SceneController.UnloadScene(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  id: UnloadScene(System.Int32,System.Single,System.Single,System.Single,System.Boolean,System.Boolean)
  parent: Global.SceneController
  langs:
  - csharp
  - vb
  name: UnloadScene(int, float, float, float, bool, bool)
  nameWithType: SceneController.UnloadScene(int, float, float, float, bool, bool)
  fullName: SceneController.UnloadScene(int, float, float, float, bool, bool)
  type: Method
  source:
    remote:
      path: Assets/Scripts/Tools/SceneController.cs
      branch: master
      repo: https://github.com/AIChubar/GPTJRPG
    id: UnloadScene
    path: ../Assets/Scripts/Tools/SceneController.cs
    startLine: 64
  assemblies:
  - Assembly-CSharp
  namespace: Global
  syntax:
    content: public static void UnloadScene(int index, float closingDuration = 1, float openingDuration = 1, float waitTime = 0.4, bool additive = false, bool toUnload = true)
    parameters:
    - id: index
      type: System.Int32
    - id: closingDuration
      type: System.Single
    - id: openingDuration
      type: System.Single
    - id: waitTime
      type: System.Single
    - id: additive
      type: System.Boolean
    - id: toUnload
      type: System.Boolean
    content.vb: Public Shared Sub UnloadScene(index As Integer, closingDuration As Single = 1, openingDuration As Single = 1, waitTime As Single = 0.4, additive As Boolean = False, toUnload As Boolean = True)
  overload: Global.SceneController.UnloadScene*
  nameWithType.vb: SceneController.UnloadScene(Integer, Single, Single, Single, Boolean, Boolean)
  fullName.vb: SceneController.UnloadScene(Integer, Single, Single, Single, Boolean, Boolean)
  name.vb: UnloadScene(Integer, Single, Single, Single, Boolean, Boolean)
references:
- uid: Global
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: UnityEngine.Object
  commentId: T:UnityEngine.Object
  parent: UnityEngine
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: UnityEngine.Component
  commentId: T:UnityEngine.Component
  parent: UnityEngine
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: UnityEngine.Behaviour
  commentId: T:UnityEngine.Behaviour
  parent: UnityEngine
  isExternal: true
  name: Behaviour
  nameWithType: Behaviour
  fullName: UnityEngine.Behaviour
- uid: UnityEngine.MonoBehaviour
  commentId: T:UnityEngine.MonoBehaviour
  parent: UnityEngine
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: System.Object.Global.ReflectionExtensions.ToStringWithQuotes
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  parent: Global.ReflectionExtensions
  definition: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: UnityEngine
  commentId: N:UnityEngine
  isExternal: true
  name: UnityEngine
  nameWithType: UnityEngine
  fullName: UnityEngine
- uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  commentId: M:Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
  isExternal: true
  name: ToStringWithQuotes(object)
  nameWithType: ReflectionExtensions.ToStringWithQuotes(object)
  fullName: ReflectionExtensions.ToStringWithQuotes(object)
  nameWithType.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  fullName.vb: ReflectionExtensions.ToStringWithQuotes(Object)
  name.vb: ToStringWithQuotes(Object)
  spec.csharp:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: Global.ReflectionExtensions.ToStringWithQuotes(System.Object)
    name: ToStringWithQuotes
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: Global.ReflectionExtensions
  commentId: T:Global.ReflectionExtensions
  name: ReflectionExtensions
  nameWithType: ReflectionExtensions
  fullName: ReflectionExtensions
- uid: Global.Sound
  commentId: T:Global.Sound
  name: Sound
  nameWithType: Sound
  fullName: Sound
- uid: Global.SceneController.LoadScene*
  commentId: Overload:Global.SceneController.LoadScene
  name: LoadScene
  nameWithType: SceneController.LoadScene
  fullName: SceneController.LoadScene
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Global.SceneController.UnloadScene*
  commentId: Overload:Global.SceneController.UnloadScene
  name: UnloadScene
  nameWithType: SceneController.UnloadScene
  fullName: SceneController.UnloadScene
